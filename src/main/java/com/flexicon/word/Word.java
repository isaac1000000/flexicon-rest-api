package com.flexicon.word;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.Id;
import jakarta.persistence.Table;
import org.springframework.data.annotation.Immutable;

import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.nio.charset.StandardCharsets;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;

/**
 * A word corresponding to a row in the <code>word</code> in the flexicon database.
 *
 * @author isaac1000000
 */
@Entity
@Table(name="words")
@Immutable
public class Word {

    /**
     * The id of the word generated by hashing the string.
     *
     * @see #toId(String word)
     */
    @Id
    @Column(name="id")
    private Long id;

    /**
     * The readable alphabetic representation of the word.
     */
    @Column(name="word")
    private String word;

    /**
     * The number of times the word appeared during article parsing.
     */
    @Column(name="instances")
    private Long instances;

    /**
     * The dictionary definition of the word
     */
    @Column(name="definition")
    private String definition;

    /**
     * The frequency of the word relative to other words.
     */
    @Column(name="frequency")
    private Double frequency;

    /**
     * Hashes <code>word</code> into a semi-unique identifier.
     * There are no overlaps in the current word dataset.
     *
     * @param word the word to be parsed
     * @return <code>word</code>'s id hash (not guaranteed to be in the word dataset)
     */
    public static Long toId(String word) {
        byte[] wordAsBytes = word.getBytes(StandardCharsets.UTF_8);
        MessageDigest md;
        try {
            md = MessageDigest.getInstance("MD5");
        } catch (NoSuchAlgorithmException _) {
            System.err.println("Current JVM does not contain MD5 algorithm");
            return null;
        }
        md.update(wordAsBytes);

        // Apply md5 to byte[]of word
        byte[] digest = md.digest();

        // Get long from byte[]
        return ByteBuffer.wrap(digest, 0, 8).order(ByteOrder.BIG_ENDIAN).getLong();
    }

    public Long getId() {
        return id;
    }

    public String getWord() {
        return word;
    }

    public Long getInstances() {
        return instances;
    }

    public String getDefinition() {
        return definition;
    }

    public Double getFrequency() {
        return frequency;
    }

    public Word() { }
}
